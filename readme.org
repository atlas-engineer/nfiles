#+TITLE: NFiles

NFiles is a Common Lisp library to help manage file persistence and loading, in
particular user-centric files like configuration files.

** Goals

- Performance:
  - Data is not persisted to disk if it does not need to.
  - Files are read only once.
- Extensibility:
  Persist any data structure the way you want it.
- Reliability: no corruption and no data loss should occur.

** Features

- Dynamic and customizable path expansion.
- Extensible serialization and deserialization.
- Cached reads and writes.
  When a =file= object expands to the same path as another one, a =read= or
  =write= on it won't do anything in case there was no change since last write.
- (*Experimental!*) On-the-fly PGP encryption.
- Profile support.
- On read error, existing files are backed up.
- On write error, no file is written to disk, the existing file is preserved.

# TODO: On-the-fly compression?  Users should prefer compression at the level of
# the file system.

** Motivation

This package was developed after dealing with a pickle when delivering Common
Lisp images: When an image is generated, path expansion may already be resolved
and thus hard-coded within the image, which makes it unfit for delivery.
Consider this:

#+begin_src lisp
> (defvar *foo-path* (uiop:xdg-config-home))
*FOO-PATH*
> *foo-path*
#P"/home/johndoe/.config/"
#+end_src

Now if I ship this image to my friend Kaboom, =*foo-path*= will expand to

#+begin_quote
#P"/home/johndoe/.config/
#+end_quote

on their machine instead of the expected

#+begin_quote
#P"/home/kaboom/.config/"
#+end_quote

** Examples

A basic session:

#+begin_src lisp
(defvar *config-file* (make-instance 'nfiles:config-file :base-path "my-app/init.lisp"))

(nfiles:expand *config-file*)
; => #P"/home/johndoe/.config/my-app/init.lisp"

(setf (nfiles:content *config-file*) "Hello file!")

(nfiles:content *config-file*)
; => "Hello file!"
#+end_src

The following convenience macro ensures the file is updated when done with the
body:

#+begin_src lisp
  (nfiles:with-file-content (content *config-file*)
    (format t "Length: ~a~%" (length content))
    (setf content (serapeum:string-replace "file" content "config")))
#+end_src

The tests contain more useful examples.

** Configuration

NFiles shines at configurability.  All configuration happens via subclassing of
the =file= and =profile= classes together with method specialization.

All configuration methods are specialized against =profile= and =file= so that
the user can easily *compose* the behaviour:
- Profile-constomization impacts all files using that profile;
- File-customization impacts the files of that specific type (or subtype)
  regardless of their profile.

Of course you can specialize against both!

The specialization methods are divided into the following:

- =resolve=: This is where path resolution is done.  On call site, prefer the
  =expand= convenience wrapper.

- =deserialize= and =serialize=: This is how the content is transformed
  to the file on disk.  These functions are meant to be called by the
  =write-file= and =read-file= methods.

- =read-file= and =write-file=: This is how the file is read and written to
  disk.  These functions are responsible for calling the =deserialize= and
  =serialize= methods.

** Roadmap

- Improve PGP support.
- Support OS-level locks (Ã -la Emacs / LibreOffice).
- Improve portability, in particular preservation of file attributes may not
  work on Windows.

** History

NFiles was originally developed for user file management in [[https://nyxt.atlas.engineer][Nyxt]], so the "N"
may stand for it, or "New", or whatever poetic meaning you may find behind it!
